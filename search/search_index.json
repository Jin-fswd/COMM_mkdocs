{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Welcome to Instruction","text":"<p>This guide provides an introduction and step-by-step instructions for installing essential tools to set up a web development environment. Node.js and npm are crucial for server-side development in JavaScript, Git is essential for collaboration and version control, and VSCode Extensions enhance development productivity.</p>"},{"location":"#before-we-start","title":"Before we start","text":"<p>VSCode is a lightweight yet powerful code editor that allows you to do the coding and download various node modules. Also, there is an extension that your life makes easier. To work on the next instructions, you need to install the VSCode and there are some steps to follow for installation.</p>"},{"location":"#installing-visual-studio-code","title":"Installing Visual Studio Code","text":"<ol> <li>Visit the Official VSCode Website, you must see the download according to your OS. </li> <li>When you click the download button, it will brings you to Getting Started page, and automatically download the .zip file. </li> <li>Unzip the file, then it will automatically add an application on your background. </li> <li>Now, you are good to go the next steps!</li> </ol>"},{"location":"Extension/","title":"Enhance Your VSCode Experience with Three Must-Have Extensions","text":"<p>The extension is the attractive part of VSCode to help you write the code effectively, concretely, and see intuitively. It also contains new languages, debuggers, and tools to support your development workflow. Now, I'm going to introduce you to my recommendation to help you when you are working on a project with VSCode.</p> <p>The Live Server, I would like to recommend is a live server extension. Live server is the extension that helps you to see intuitively what is happening with what you wrote with HTML code through the web browser and it changes right away if you make any changes to your HTML code. Live Server</p> <p>The next one is an Error Lens which allows you to see Error, warning and diagnostic messages that fit the code displayed on the line without clicking it. Error Lens</p> <p>Lastly, the Prettier Extension is the extension that makes your code much prettier, so you don't need to worry about clean code while you're working on the logical stuff. Prettier</p>"},{"location":"Extension/#how-can-i-get-those-extensions","title":"How Can I Get Those Extensions?","text":"<p>If you liked the extensions above, and try to apply it to your workplace, then the next thing you might need to do is search the extensions and download it. The following is an explanation of how to download extensions, and let's download what you want.</p> <ol> <li> <p>Go to Extension Veiw. View &gt; Extensions(CTRL+SHIFT+X / \u21e7\u2318X)    The First step is open the VSCode and click the extension button on the left-side interface,     then you will see the extension window pop from the left-side interface like the picture below.    </p> </li> <li> <p>Search for the extension you want to find.    The next step is write down the extension name on the search bar.    </p> </li> <li> <p>Install the Liver Server extension.    You will see many different extension when you search for Live Server. Click the same extension as shown in the picture.    Then, you will able to see the install button on the right-side window. </p> </li> <li> <p>Manage gear button    When you install the extension, the install button will change to manage gear button which is Disable and Uninstall button. Just let you know if you click the Disable button, the extension will not be using until you enable the extension again. The Uninstall button is for deleting the extension from your local machine.    </p> </li> </ol>"},{"location":"Extension/#how-can-i-use-it","title":"How can I use it?","text":""},{"location":"Extension/#using-live-server-extension","title":"Using Live Server Extension","text":"<ul> <li>Start by creating an HTML file. Type an exclamation mark (!) and press Tab (Tab \u21b9) to automatically generate basic HTML code in your file. Then, write \"Hello World\" under the <code>&lt;body&gt;</code> tag.</li> </ul> <pre><code>&lt;!DOCTYPE html&gt;\n&lt;html lang=\"en\"&gt;\n&lt;head&gt;\n   &lt;meta charset=\"UTF-8\" /&gt;\n   &lt;meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\" /&gt;\n   &lt;title&gt;Document&lt;/title&gt;\n&lt;/head&gt;\n&lt;body&gt;\n   Hello World!\n&lt;/body&gt;\n&lt;/html&gt;\n</code></pre> <ul> <li> <p>Next, click the \"Go Live\" button at the bottom of the VSCode.</p> </li> <li> <p>Your web browser will open automatically, displaying the \"Hello World\" content from your HTML file. Any code changes you make will be applied to the browser in real-time. </p> </li> </ul>"},{"location":"Extension/#using-error-lens-extension","title":"Using Error Lens Extension","text":"<ul> <li>Before installing the Error Lens extension, create a CSS file with the following code, which intentionally contains an error.</li> </ul> <pre><code>h1 { \n}\n</code></pre> <p>This code is intentionally empty and should trigger an error, but it might not show any error indication until you hover over the code. </p> <ul> <li>Install the Error Lens extension and observe the changes in your CSS file. Error Lens will provide more detailed error information, making it easier to identify and fix issues.    </li> </ul>"},{"location":"Extension/#using-prettier-extension","title":"Using Prettier Extension","text":"<ul> <li> <p>After installing the Prettier extension, you may not immediately notice any differences. To enable its effects, you'll need to adjust some settings. Navigate to the bottom left corner and click on the gear icon; then, select \"Settings.\" </p> </li> <li> <p>In the Settings, use the search bar at the top and type \"default formatter.\" You should find an option named \"Default Formatter\".    </p> </li> <li> <p>Return to the Settings, click on \"Text Editor,\" and then select \"Formatting\" on the left side. Within the Formatting section, check the checkbox next to the \"Format On Save\" option. This ensures that Prettier automatically cleans and beautifies your code when you save it.    </p> </li> <li> <p>Now, let's test if it works. Create a JavaScript file and input the following code:</p> </li> </ul> <pre><code>const        test          =         1234;\n\nconst hello=         console.log('    hello: ',      test);\n</code></pre> <p>Although this code may initially seem unclear and unreadable, save the file (\u2318S / CTRL + S), and you will observe that the Prettier extension significantly enhances the clarity of your code. </p>"},{"location":"git/","title":"Using Git on VSCode","text":""},{"location":"git/#overview","title":"Overview","text":"<p>This section will walk you through the essential steps of using Git within VS Code to manage your code repositories effectively. Whether you're a beginner or an experienced developer, this documentation will help you navigate through creating local and remote repositories, utilizing branching for collaboration, and deploying your services seamlessly.</p>"},{"location":"git/#prerequisite","title":"Prerequisite","text":"<p>This section assumes the following Installed:</p> <ul> <li> <p>Visual Studio Code</p> </li> <li> <p>Git</p> </li> </ul> <p>In addition, this section assumes that you are familiar with following knowledge:</p> <ul> <li> <p>How to create a Remote repository. Have a quick review here.</p> </li> <li> <p>How to run simple commands on terminal.</p> </li> </ul>"},{"location":"git/#creating-local-and-remote-repositories-and-pushing-it","title":"Creating Local and Remote Repositories and Pushing It","text":""},{"location":"git/#create-local-repository-and-make-a-first-commit","title":"Create Local Repository and Make a First Commit","text":"<p>To create a local Git repository in VS Code:</p> <ol> <li>Open VS Code.</li> <li>Open the folder or workspace where you want to create the repository. </li> <li>Click git icon on the left and click the button \"Initialize Repository\"  After creating any change in your directory, lets make a first commit.</li> <li>Hover over your file name on the left and click of the + button appeared. This will stage your changes. </li> <li>Enter your comments on the changes made (optional), and click on Commit button. </li> </ol> <p>Your project folder is now initialized and your first commit has made!</p>"},{"location":"git/#create-remote-repository-and-connect-with-local","title":"Create Remote Repository and Connect with Local","text":"<p>Next, let's create a remote repository and link it to your local repository:</p> <ol> <li>Go to your preferred Git hosting service (e.g., GitHub, GitLab).</li> <li>Create a new repository on the hosting service.</li> <li>Copy the repository URL. </li> <li>In VS Code, open the terminal.  </li> <li>Type <code>git remote add origin &lt;repository URL&gt;</code> and press Enter. </li> </ol> <p>Your local repository is now connected to the remote repository.</p>"},{"location":"git/#push-changes","title":"Push Changes","text":"<p>To push changes from your local repository to the remote repository:</p> <ol> <li>In VS Code, open the terminal. </li> <li>Push the changes to the remote repository. </li> <li>If you get this warning, press Ok. </li> <li>You can confirm (on your repository page) that you have successfully pushed your changes to the remote repository. </li> </ol> <p>Your changes are now pushed to the remote repository.</p>"},{"location":"git/#useful-extensions","title":"Useful Extensions","text":"<p>VS Code offers various extensions to enhance your Git workflow. Some useful extensions include:</p> <ul> <li>GitLens: Provides advanced Git capabilities such as blame annotations, repository/file history, and more.</li> <li>GitHub Pull Requests: Streamlines the process of creating, reviewing, and managing pull requests directly within VS Code.</li> <li>Git History: Allows you to view and search through the history of your Git repositories.</li> <li>Git Graph: Visualizes the history of branches and commits in your repository.</li> </ul> <p>Install these extensions from the VS Code Marketplace to enhance your Git experience. For detailed explanation, please refer to our page on VSCode extensions!</p> <p>By following these steps and utilizing the recommended extensions, you can effectively manage your code repositories using Git within Visual Studio Code.</p>"},{"location":"git/#conclusion","title":"Conclusion","text":"<p>Congratulations! You've learned how to effectively use Git within Visual Studio Code for managing your code repositories, collaborating with others using branching, and maximizing github functionality with extensions. Feel free to explore more advanced Git features and integrations to streamline your development workflow.</p>"},{"location":"glossary/","title":"Glossary","text":"Term Description Address Bar A graphical UI element in a web browser that displays the current URL of the webpage being viewed and allows users to input or edit URLs to navigate to different web pages. Asynchronous Execution that occurs without waiting for other tasks to complete, allowing for non-blocking operations. Body-parser A middleware for Express.js (and other Node.js web frameworks) that parses incoming request bodies from client applications, allowing developers to access form data, JSON payloads, and other request body content in their server-side code easily. Branch A lightweight movable pointer to a commit in Git, representing an independent line of development and allowing developers to work on features or fixes without affecting the main codebase. Command A specific instruction given to the computer through the terminal to perform a particular action or task. Commit The act of saving changes to the local repository in Git, recording a snapshot of the project's state at a particular point in time along with a commit message describing the changes made. Corepack manager A tool that manages core package managers for JavaScript. CSS Cascading Style Sheets (CSS) is a style sheet language used for specifying the presentation and styling of a document written in a markup language such as HTML Directory A location in a file system where files can be stored. Also referred to as a folder. Error Lens Displays error, warning, and diagnostic messages on code lines, helping quickly identify areas that need modification. Event-Driven A programming paradigm in which the flow of the program is determined by events such as user actions, sensor outputs, or message passing. Express A minimal and flexible web application framework for Node.js, designed to simplify the process of building web applications and APIs by providing a robust set of features for routing, middleware, and HTTP request handling. Extension An add-on for Visual Studio Code that enhances its functionality, allowing users to add languages, debuggers, tools, and integrations to support their development workflow. Framework A pre-built, reusable software structure or platform that provides a foundation for developing applications, often including libraries, tools, and predefined patterns to streamline development tasks and maintain consistency. Git A distributed version control system for tracking changes in source code during software development. HTML HyperText Markup Language or HTML is the standard markup language for documents designed to be displayed in a web browser. Installer A software utility that installs other software onto a computer system. JavaScript runtime An environment that interprets JavaScript code and executes it. Live Server An extension for VSCode that allows real-time preview of HTML code changes in a web browser as you write them. LTS Long-Term Support, a term often used to describe a version of software that will be supported for a longer period than usual. Network Application Software that communicates over a network to provide or receive services. Node.js An asynchronous event-driven JavaScript runtime, used for developing scalable network applications. NPM Node Package Manager, a tool for managing JavaScript packages. PATH An environment variable that specifies a set of directories where executable programs are located. Prettier A code formatter that automatically cleans up code to enhance readability. Pull Request A feature of Git-based repository hosting services (e.g., GitHub, GitLab) that facilitates proposing changes to a project maintained by another user or organization, enabling code review and collaboration among team members. Push The act of sending local commits from a Git repository to a remote repository, updating the remote repository with the changes made locally. Remote Repository A repository that is hosted on a server (e.g., GitHub, GitLab) rather than on your local computer, allowing multiple developers to collaborate on a project. Runtime environment An environment that provides runtime services to a program while it is running. Terminal A text-based interface used to interact with a computer system, allowing users to execute commands and perform various tasks. URL (Uniform Resource Locator) A reference or address used to locate resources on the internet, typically consisting of a protocol (such as \"http\" or \"https\"), domain name, and path to the specific resource. Visual Studio Code (VS Code) A free source-code editor made by Microsoft for Windows, Linux, and macOS, with support for debugging, embedded Git control, syntax highlighting, intelligent code completion, snippets, and code refactoring."},{"location":"node/","title":"Node.js User Guide","text":""},{"location":"node/#1-what-is-nodejs","title":"1. What is Node.js?","text":"<p>Node.js is a JavaScript runtime built on Chrome's V8 JavaScript engine. It enables running JavaScript outside web browsers, primarily for server-side development.</p>"},{"location":"node/#chromes-v8-engine","title":"Chrome's V8 Engine","text":"<ul> <li>Originally, JavaScript was confined to web browser execution.</li> <li>Each web browser has its JavaScript engine, with Chrome's V8 engine being notable for its speed.</li> <li>Node.js extends the V8 engine's capabilities, allowing JavaScript execution in server environments.</li> </ul>"},{"location":"node/#javascript-runtime","title":"JavaScript Runtime","text":"<ul> <li>The term 'runtime' denotes the environment in which a program executes.</li> <li>Node.js provides a standalone environment for JavaScript code execution, facilitating its use in back-end applications.</li> </ul>"},{"location":"node/#2-advantages-of-nodejs","title":"2. Advantages of Node.js","text":"<ol> <li>Language Unification: Utilizing a single language for both client-side and server-side streamlines learning and enhances productivity.</li> <li>Community: Node.js boasts a robust and supportive developer community, offering a wealth of resources and support.</li> <li>Module Ecosystem: The npm (Node Package Manager) houses a vast array of third-party modules, aiding in rapid development and deployment.</li> </ol>"},{"location":"node/#3-conclusion","title":"3. Conclusion","text":"<p>Node.js harnesses the efficient V8 engine and a rich module ecosystem, providing a versatile environment for full-stack JavaScript development. Its integrated approach facilitates a streamlined and productive development experience.</p>"},{"location":"node/#nodejs-installation-guide","title":"Node.js Installation Guide","text":""},{"location":"node/#installing-nodejs-on-windows","title":"Installing Node.js on Windows","text":"<ol> <li> <p>Navigate to the Node.js official website and download the installer for Windows.</p> <p></p> </li> <li> <p>Run the downloaded installer. When the installation wizard opens, click 'Next'.</p> <p></p> </li> <li> <p>Accept the license agreement and click 'Next'.</p> <p></p> </li> <li> <p>Choose the installation directory (default is C:\\Program Files\\nodejs) and click 'Next'.</p> <p></p> </li> <li> <p>Select the components you wish to install. It is typically recommended to leave these at their default settings. Click 'Next' to continue.</p> <p></p> </li> <li> <p>Review your selections and click 'Install' to proceed with the installation.</p> <p></p> </li> <li> <p>Once the installation is complete, click 'Finish' to close the installer.</p> <p></p> </li> </ol>"},{"location":"node/#installing-nodejs-on-macos","title":"Installing Node.js on macOS","text":"<ol> <li> <p>Visit the Node.js official website and download the macOS installer.</p> <p></p> </li> <li> <p>Open the downloaded .pkg file to start the installation process.</p> <p></p> </li> <li> <p>Follow the installation steps in the wizard, clicking 'Continue' to proceed through each step.</p> <p></p> </li> <li> <p>Agree to the software license agreement to continue with the installation.</p> <p></p> </li> <li> <p>Click 'Install' to begin the installation process. You may need to provide your administrator password.</p> </li> </ol> <p>After completing these steps, Node.js will be installed on your system. You can verify the installation by opening a terminal or command prompt and typing <code>node -v</code>, which should display the current version of Node.js installed on your system.</p>"},{"location":"node/#verifying-nodejs-installation","title":"Verifying Node.js Installation","text":"<p>Follow the steps below to verify that Node.js has been properly installed.</p>"},{"location":"node/#verifying-nodejs-installation-on-windows","title":"Verifying Node.js Installation on Windows","text":"<ol> <li>Type 'cmd' or 'Terminal' in the search bar on the taskbar and press [Enter] to open the Command Prompt.</li> <li>In the Command Prompt window, type <code>node</code> and press [Enter].</li> <li>If the installed version of Node.js appears and the cursor changes to <code>&gt;</code>, it indicates that Node.js is successfully installed.</li> <li>You can now execute JavaScript code. For example, typing <code>console.log(1 + 2)</code> and pressing [Enter] should output 3.</li> <li>To exit the Node.js environment, press [Ctrl+C] twice, then close the Command Prompt window.</li> </ol>"},{"location":"node/#verifying-nodejs-installation-on-macos","title":"Verifying Node.js Installation on macOS","text":"<ol> <li>Click on the 'Terminal' icon in the Dock or Launchpad to open the Terminal app.</li> <li>In the Terminal window, type <code>node</code> and press [Enter].</li> <li>If Node.js version information is displayed and the cursor changes to <code>&gt;</code>, Node.js is installed correctly.</li> <li>Test executing JavaScript code, such as <code>console.log(1 + 2)</code>. If it outputs 3, your setup is correct.</li> <li>To exit the Node.js environment, press [Ctrl+C] twice and close the Terminal.</li> </ol> <p>By following these steps, you can confirm whether Node.js has been successfully installed on your system. Once verified, you can execute various JavaScript codes in the Node.js environment.</p>"},{"location":"node/#writing-and-running-a-simple-nodejs-code","title":"Writing and Running a Simple Node.js Code","text":"<p>After installing Node.js and setting up the development environment in Visual Studio Code (VS Code), you're ready to write and execute some simple Node.js code. Unlike front-end development, where you link JavaScript files to HTML documents or insert code directly into HTML and view the output in a web browser, with Node.js, you can execute the code directly and see the results immediately.</p>"},{"location":"node/#executing-a-simple-nodejs-code","title":"Executing a Simple Node.js Code","text":"<ol> <li>Opening VS Code and Editing a JavaScript File</li> </ol> <p>Launch VS Code and open the <code>hello.js</code> file located in the <code>01</code> folder. Initially, this file will be empty. Enter the following code and save the file:</p> <pre><code>const hello = (name) =&gt; {\nconsole.log(\"Hello, \" + name);\n};\n\nhello(\"Jane\");\n</code></pre> <p>Here, we declare a function named hello that takes a name parameter and prints a greeting to the console. We then call this hello function with \"Jane\" as the argument.</p> <ol> <li>Opening the Terminal</li> </ol> <p>To open the terminal window within VS Code, use the [Ctrl + Shift + ` ] shortcut (for Mac users, it's [Command + Shift + ` ]).</p> <p>The terminal displays the current working folder path. To execute a JavaScript file in Node.js, you need to be in the directory containing the file. To run the hello.js file in the 01 folder, you must navigate to this folder first. Type the following command in the terminal to change directories:</p> <ol> <li>Executing JavaScript with Node.js</li> </ol> <p>In Node.js, you execute a JavaScript file using the node command followed by the filename. You can omit the .js extension, as most developers do:</p> <pre><code>node hello\n</code></pre> <p>This command executes the hello function within the hello.js file, and the result is displayed in the terminal.</p> <ol> <li>Verifying the Execution Result</li> </ol> <p>The output of the hello function execution is displayed in the terminal. In this example, you would see:</p> <pre><code>hello, Jane\n</code></pre> <p>Using Node.js allows you to run JavaScript code outside a web browser and view the results immediately in your development environment.</p>"},{"location":"node/#congratulations","title":"Congratulations!","text":"<p>You have now installed Node.js and learned how to write and run a basic Node.js program. With this knowledge, you can lay the foundation for server-side development using Node.js.</p>"},{"location":"npm/","title":"A Guide to Setting Up Node.js Projects with npm","text":""},{"location":"npm/#introduction-to-npm","title":"Introduction to npm","text":"<p>Setting up Node.js projects with npm (Node Package Manager) in Visual Studio Code (VSC) is a fundamental process for many developers. Below is a comprehensive step-by-step guide to help you set up your Node.js project in VSC using npm:</p>"},{"location":"npm/#prerequisites","title":"Prerequisites:","text":"<p>Make sure you have Visual Studio Code and Node.js installed on your system. You can download and install them by following these guides: Install Visual Studio Code and Install Node.js.</p>"},{"location":"npm/#steps","title":"Steps:","text":"<ul> <li>Create a New Folder for Your Project: Open Visual Studio Code and create a new folder where you want to set up your Node.js project. You can do this by navigating to  <code>File &gt; Open Folder...</code> and then selecting or creating a new folder.</li> </ul> <ul> <li>Open Terminal in Visual Studio Code: Once you have your project folder open in Visual Studio Code, you need to open an integrated terminal. You can do this by navigating to <code>View &gt; Terminal</code>.</li> </ul> <ul> <li>Change Project Directory: In the terminal, navigate to your project directory if you're not already there, using the cd command: </li> </ul> <pre><code>cd path/to/your/project\n</code></pre> <ul> <li>Initialize Your Project with npm: Now, initialize your project with npm by running the following command in the Terminal (This command will create a <code>package.json</code> file with default values in your project directory):</li> </ul> <pre><code>npm init -y\n</code></pre> <ul> <li>Install Dependencies: You can start installing dependencies for your project using npm. For example, let's install Express.js, a popular Node.js framework. Type the following command in the Terminal:</li> </ul> <pre><code>npm install express\n</code></pre> <ul> <li>Install Dependencies (Multiple): To install multiple dependencies for your project using npm, you can list them all in a single command. For example, let's install Express.js and Body-parser, both popular Node.js packages. Type the following command in the Terminal:</li> </ul> <pre><code>npm install express body-parser\n</code></pre> <ul> <li>Create Your Node.js Application: Now, you can start writing your Node.js application code. Create a new JavaScript file (e.g., app.js) in your project directory and start writing your Node.js code. Let's look at a very simple code:</li> </ul> <pre><code>// app.js\nconst express = require('express');\nconst app = express();\n\napp.get('/', (req, res) =&gt; {\n  res.send('Hello, World!');\n});\n\napp.listen(3000, () =&gt; {\n  console.log('Server is running on http://localhost:3000');\n});\n</code></pre> <ul> <li>Run Your Node.js Application: To run your Node.js application, you can use the integrated terminal in Visual Studio Code. Make sure you're in your project directory, and then type the following command in the Terminal:</li> </ul> <pre><code>node app.js\n</code></pre> <ul> <li>View in Web Browser: Now that the Node.js server is live, you can access it by visiting <code>http://localhost:3000</code> in your web browser. Simply copy and paste the URL into the address bar at the top of the browser. </li> </ul> <ul> <li>Congratulations! You have successfully set up a Node.js project using npm in Visual Studio Code. </li> </ul>"},{"location":"troubleshoot/","title":"Troubleshooting Guide","text":""},{"location":"troubleshoot/#overview","title":"Overview","text":"<p>This troubleshooting guide provides solutions to common issues that users may encounter while using Visual Studio Code following this guide.</p>"},{"location":"troubleshoot/#prerequisites","title":"Prerequisites","text":"<p>Ensure that you have Visual Studio Code and Node.js installed on your system. You can download and install them by following these guides: Install Visual Studio Code and Install Node.js.</p>"},{"location":"troubleshoot/#missing-installation","title":"Missing Installation","text":""},{"location":"troubleshoot/#issue","title":"Issue","text":"<p>Encountering errors related to missing installations of Visual Studio Code or Git.</p>"},{"location":"troubleshoot/#solution","title":"Solution","text":"<ul> <li>Check Installation: Ensure that Visual Studio Code and Git are properly installed on your system.</li> <li>Download Links: Use the provided download links to install Visual Studio Code and Git.</li> </ul>"},{"location":"troubleshoot/#npm-package-installation","title":"npm Package Installation","text":""},{"location":"troubleshoot/#issue_1","title":"Issue","text":"<p>Unable to install npm packages for the project.</p>"},{"location":"troubleshoot/#solution_1","title":"Solution","text":"<ol> <li>Check Internet Connection: Ensure stable internet connectivity to access the npm registry.</li> <li>Clear npm Cache: Execute <code>npm cache clean --force</code> to clear the npm cache and retry package installation.</li> <li>Verify Package Name: Double-check the spelling and correctness of the package name.</li> <li>Retry Installation: Retry the installation after some time in case of temporary network issues or server problems.</li> </ol>"},{"location":"troubleshoot/#application-execution","title":"Application Execution","text":""},{"location":"troubleshoot/#issue_2","title":"Issue","text":"<p>Encountering errors while running a Node.js application.</p>"},{"location":"troubleshoot/#solution_2","title":"Solution","text":"<ol> <li>Review Code Syntax: Check the application code for syntax errors or typos.</li> <li>Ensure Dependencies: Verify that all required dependencies are correctly installed using npm or yarn.</li> <li>Port Availability: Ensure the specified port in the application code is not in use by another application.</li> <li>Utilize Debugging: Use debugging tools available in your IDE or Node.js runtime to identify and resolve runtime errors.</li> </ol>"},{"location":"troubleshoot/#failure-to-initialize-repository","title":"Failure to Initialize Repository","text":"<p>If unable to initialize a local Git repository in VSCode:</p> <ul> <li>Double-check the current folder or workspace.</li> <li>Follow the documentation steps accurately.</li> </ul>"},{"location":"troubleshoot/#connection-issues","title":"Connection Issues","text":"<p>If facing difficulties connecting local repository to a remote one:</p> <ul> <li>Verify the accuracy of the repository URL.</li> <li>Check for any typos in the <code>git remote add origin &lt;repository URL&gt;</code> command.</li> </ul>"}]}